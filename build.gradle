// For those who want the bleeding edge
buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins {
	id 'com.matthewprenger.cursegradle' version '1.0.5'
}

buildDir = "build-${mc_version}"

apply plugin: 'net.minecraftforge.gradle.forge'

version = mc_version + "-" + mod_version
group = "org.squiddev"
archivesBaseName = "plethora"

minecraft {
	version = "${project.mc_version}-${project.forge_version}"
	runDir = "run-${project.mc_version}"
	mappings = "snapshot_20161111"

	replace '${mod_version}', project.mod_version
	replace '${mc_version}', project.mc_version
	replace '${cc_version}', project.cc_version
}

jar {
	manifest {
		attributes(
			'FMLAT': 'Plethora_at.cfg',
		)
	}

	exclude "**/*.java"
}

repositories {
	jcenter()

	// JEI + Tinker's
	maven { url = "http://dvs1.progwml6.com/files/maven" }

	// ComputerCraft
	maven { url "https://cc.crzd.me/maven/" }

	// CCTweaks + ConfigGen
	maven { url = "https://dl.bintray.com/squiddev/maven" }

	// IC2 API
	maven { url = "http://maven.ic2.player.to/" }

	// Buildcraft
	ivy {
		artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
	}

	// Multipart
	maven { url "http://maven.amadornes.com/" }

	// Refined Storage
	maven { url "http://dl.bintray.com/raoulvdberge/dev" }

	// Tesla
	maven { url 'https://maven.mcmoddev.com' }

	// CBMP
	maven { url "http://chickenbones.net/maven" }
	maven { url 'https://minecraft.curseforge.com/api/maven/' } // Everything else
}

def curseMod(String mod, int id, String version) {
	def f = file("lib-${project.mc_version}/${mod}-${version}.jar")
	if (!f.exists()) {
		f.parentFile.mkdirs();

		def url = new URL("https://minecraft.curseforge.com/projects/${mod}/files/${id}/download");
		logger.info("Fetching ${mod} (${version}) from ${url}")

		def connection = url.openConnection();
		connection.setRequestProperty("User-Agent", "Gradle file downloader");
		connection.connect();

		def i = connection.getInputStream();
		f.withOutputStream { it << i }
		i.close()
	}

	files(f)
}

dependencies {
	compile "dan200.computercraft:ComputerCraft:${project.cc_version}-build10"
	deobfCompile "mezz.jei:jei_${project.mc_version}:3.13.6.392"

	compileOnly "org.squiddev:CCTweaks:${project.mc_version}-1.5.0-pr0:dev"
	compileOnly "net.industrial-craft:industrialcraft-2:2.6.99-ex110:dev"
	compileOnly "buildcraft:buildcraft:7.2.7:dev" // Won't run on 1.10.2 but just here for the future
	compileOnly "net.darkhax.tesla:Tesla:${project.mc_version}-1.2.1.50:deobf"

	// Tinker's + Dependencies
	compileOnly "slimeknights:TConstruct:${project.mc_version}-2.6.1.464"
	compileOnly "slimeknights.mantle:Mantle:${project.mc_version}-1.1.3.199"

	compileOnly "MCMultiPart:MCMultiPart:1.4.0:universal"
	compileOnly "refined-storage:refinedstorage:1.2.26"
	compileOnly "codechicken:ForgeMultipart:1.10.2-2.0.0.31:deobf"

	// All the Curse mods
	compileOnly curseMod("botania", 2391169, "r1.9-341")
	compileOnly curseMod("forestry", 2517394, "1.10.2-5.2.17.388")
	compileOnly curseMod("applied-energistics-2", 2454983, "rv4-stable-1")
	compileOnly curseMod("baubles", 2518666, "1.10.2-1.3.13")
	compileOnly curseMod("storage-drawers", 2446106, "1.10.2-3.7.10")
	compileOnly curseMod("chameleon", 2419174, "1.10.2-2.3.0")

	compileOnly('org.squiddev:ConfigGen:1.2.5') { exclude group: 'net.minecraftforge' }

	testCompile 'junit:junit:4.11'
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "mod_version", project.mod_version
	inputs.property "mc_version", project.mc_version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'mod_version': mod_version, 'mc_version': mc_version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint" << "-Xlint:-rawtypes" << "-Xlint:-processing"
	}
}

curseforge {
	apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''

	project {
		id = '248425'
		releaseType = 'release'
		changelog = ''

		relations {
			requiredLibrary 'computercraft'
		}
	}
}
